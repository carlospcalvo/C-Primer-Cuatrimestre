#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/*
--DEFINICION ESTRUCTURA
--CONTRUCTOR VACIO
--CONTRUCTOR PARAMETRIZADO
--GETTERS
--SETTERS
--MOSTRAR UNA ESTRUCTURA
--MOSTRAR TODAS LAS ESTRUCTURAS
--FUNCIONES DE ORDENAMIENTO
*/

typedef struct{
    int id;
    char nombre[20];
    float sueldo;
}eEmpleado;

//contructores
eEmpleado* newEmpleado(); //constructor vacio
eEmpleado* newEmpleadoParam(int id, char* nombre, float sueldo); //constructor parametrizado
//setters
int setIdEmpleado(eEmpleado* e, int id);
int setSueldoEmpleado(eEmpleado* e, float sueldo);
int setNombreEmpleado(eEmpleado* e, char* nombre);
//getters
int getIdEmpleado(eEmpleado* e, int* id);
int getSueldoEmpleado(eEmpleado* e, float* sueldo);
int getNombreEmpleado(eEmpleado* e, char* nombre);
//mostrar
int mostrarEmpleado(eEmpleado* e);
int mostrarEmpleados(eEmpleado** e, int tam);

eEmpleado** agrandarLista(eEmpleado** vec, int tam);

int main()
{
    int tam = 0;
    eEmpleado** lista = (eEmpleado**) malloc(sizeof(eEmpleado*)); //memoria ocupada por un puntero = 4 bytes
    eEmpleado* auxEmpleado = NULL;
    int auxInt;
    float auxFloat;
    char auxCad[100];

    if(lista == NULL)
    {
        printf("No se pudo asignar memoria\n");
        system("pause");
        exit(EXIT_FAILURE);
    }

    printf("Ingrese id: ");
    scanf("%d", &auxInt);

    printf("Ingrese nombre: ");
    fflush(stdin);
    gets(auxCad);

    printf("Ingrese sueldo: ");
    scanf("%f", &auxFloat);

    auxEmpleado = newEmpleadoParam(auxInt, auxCad, auxFloat);
    if(auxEmpleado == NULL)
    {
        printf("No se pudo cargar el empleado\n");
    }
    else
    {
        printf("Empleado cargado con exito\n");

        *(lista + tam) = auxEmpleado;
        if(agrandarLista(lista, tam +1) != NULL)
        {
            printf("Empleado agregado a la lista\n");
            tam++;
        }
    }
    system("pause");

    mostrarEmpleados(lista, tam);



    return 0;
}

eEmpleado* newEmpleado()
{
    eEmpleado* nuevo = (eEmpleado*) malloc(sizeof(eEmpleado));

    if(nuevo != NULL)
    {
        nuevo->id = 0;
        strcpy(nuevo->nombre, " ");
        nuevo->sueldo = 0;
    }

    return nuevo;
}

eEmpleado* newEmpleadoParam(int id, char* nombre, float sueldo)
{
    eEmpleado* nuevo = newEmpleado();

    if(nuevo != NULL)
    {
        if(setIdEmpleado(nuevo, id) && setNombreEmpleado(nuevo, nombre) && setSueldoEmpleado(nuevo, sueldo))
        {
            printf("Empleado creado con exito\n");
        }
        else
        {
            nuevo = NULL;
        }
    }

    return nuevo;
}

int setIdEmpleado(eEmpleado* e, int id)
{
    int todoOk = 0;

    if(e != NULL && id >= 10000 && id <= 20000)
    {
        e->id = id;
        todoOk = 1;
    }
    return todoOk;
}

int setSueldoEmpleado(eEmpleado* e, float sueldo)
{
    int todoOk = 0;

    if(e != NULL && sueldo > 0)
    {
        e->sueldo = sueldo;
        todoOk = 1;
    }
    return todoOk;
}

int setNombreEmpleado(eEmpleado* e, char* nombre)
{
    int todoOk = 0;

    if(e != NULL && nombre != NULL && strlen(nombre) < 20)
    {
        strcpy(e->nombre, nombre);
        todoOk = 1;
    }
    return todoOk;
}

int getIdEmpleado(eEmpleado* e, int* id)
{
    int todoOk = 0;

    if(e != NULL && id != NULL)
    {
        *id = e->id;
        todoOk = 1;
    }
    return todoOk;
}

int getSueldoEmpleado(eEmpleado* e, float* sueldo)
{
    int todoOk = 0;

    if(e != NULL && sueldo != NULL)
    {
        *sueldo = e->sueldo;
        todoOk = 1;
    }
    return todoOk;
}

int getNombreEmpleado(eEmpleado* e, char* nombre)
{
    int todoOk = 0;

    if(e != NULL && nombre != NULL)
    {
        strcpy(nombre, e->nombre);
        todoOk = 1;
    }
    return todoOk;
}

int mostrarEmpleado(eEmpleado* e)
{
    int todoOk = 0;

    if(e != NULL)
    {
        printf("%d %s %.2f\n", e->id, e->nombre, e->sueldo);
        todoOk = 1;
    }

    return todoOk;
}

int mostrarEmpleados(eEmpleado** e, int tam)
{
    int todoOk = 0;

    if(e != NULL && tam>0)
    {
        printf("ID  Nombre  Sueldo\n");
        for(int i = 0; i<tam; i++)
        {
            mostrarEmpleado(*(e + i));
        }

        todoOk = 1;
    }

    return todoOk;
}

eEmpleado** agrandarLista(eEmpleado** vec, int tam)
{
    eEmpleado** aux = (eEmpleado**) realloc(vec, sizeof(eEmpleado*) + tam);

    if(aux != NULL)
    {
        vec = aux;
    }

    return aux;
}
